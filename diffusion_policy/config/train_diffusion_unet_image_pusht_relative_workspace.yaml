defaults:
  - _self_
  - task: pusht_image

name: train_diffusion_unet_hybrid_relative
_target_: diffusion_policy.workspace.train_diffusion_unet_hybrid_relative_workspace.TrainDiffusionUnetHybridRelativeWorkspace

normalizer:
  stats:
    agent_pos:
      min: [0.0]
      max: [512.0]
    action:
      min: [0.0]
      max: [512.0]
    image:
      min: [0.0]
      max: [1.0]

checkpoint:
  topk:
    monitor_key: test_mean_score
    mode: max
    k: 5
    format_str: 'epoch={epoch:04d}-test_mean_score={test_mean_score:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

dataloader:
  batch_size: 64
  num_workers: 0
  shuffle: True
  pin_memory: True
  persistent_workers: False

val_dataloader:
  batch_size: 64
  num_workers: 0
  shuffle: False
  pin_memory: True
  persistent_workers: False

#dataset_obs_steps: 2
ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  inv_gamma: 1.0
  max_value: 0.9999
  min_value: 0.0
  power: 0.75
  update_after_step: 0

task_name: ${task.name}
exp_name: "default"
horizon: 16
n_obs_steps: 2
n_action_steps: 8
n_latency_steps: 0
keypoint_visible_rate: 1.0
obs_as_global_cond: true
past_action_visible: False
embedding_dim: 60

optimizer:
  _target_: torch.optim.AdamW
  betas:
  - 0.95
  - 0.999
  eps: 1.0e-08
  lr: 0.0001
  weight_decay: 1.0e-06

policy:
  _target_: diffusion_policy.policy.diffusion_unet_hybrid_image_relative_policy.DiffusionUnetHybridImageRelativePolicy
     
  shape_meta: ${task.shape_meta}

  noise_scheduler:
    _target_: diffusers.schedulers.scheduling_ddpm.DDPMScheduler
    beta_end: 0.02
    beta_schedule: squaredcos_cap_v2
    beta_start: 0.0001
    clip_sample: true
    num_train_timesteps: 100
    prediction_type: epsilon
    variance_type: fixed_small

  obs_encoder:
    _target_: diffusion_policy.model.vision.transformer_hybrid_obs_relative_encoder.TransformerHybridObsRelativeEncoder
    shape_meta: ${task.shape_meta}
    rgb_model:
      _target_: diffusion_policy.model.vision.model_getter.get_clip
      features: "res2"
    rgb_model_frozen: True
    rgb_out_proj:
      _target_: torch.nn.Conv2d
      in_channels: 256
      out_channels: ${embedding_dim}
      kernel_size: 1
    n_obs_steps: ${n_obs_steps}
    query_embeddings: 
      _target_: torch.nn.Embedding
      num_embeddings: ${n_obs_steps}
      embedding_dim: ${embedding_dim}
    rotary_embedder: 
      _target_: diffusion_policy.model.common.position_encodings.RotaryPositionEncoding2D
      feature_dim: ${embedding_dim}
    positional_embedder:
      _target_: diffusion_policy.model.common.position_encodings.SinusoidalPosEmb
      dim: ${embedding_dim}
    within_attn: 
      _target_: diffusion_policy.model.common.layer.RelativeCrossAttentionModule
      embedding_dim: ${embedding_dim}
      num_attn_heads: 5
      num_layers: 5
    across_attn: 
      _target_: diffusion_policy.model.common.layer.RelativeCrossAttentionModule
      embedding_dim: ${embedding_dim}
      num_attn_heads: 5
      num_layers: 5

    resize_shape: null
    # crop_shape: [76, 76]
    # constant center crop
    random_crop: False
    use_group_norm: False
    share_rgb_model: True
    clip_norm: False
  horizon: ${horizon}
  n_action_steps: ${n_action_steps}
  n_obs_steps: ${n_obs_steps}
  num_inference_steps: 100
  diffusion_step_embed_dim: 256
  down_dims:
  - 512
  - 1024
  - 2048
  obs_as_global_cond: ${obs_as_global_cond}
  eval_fixed_crop: False
  kernel_size: 5
  n_groups: 8
  obs_encoder_group_norm: False

  # scheduler.step params
  # predict_epsilon: True


training:
  checkpoint_every: 50
  debug: false
  device: cuda:0
  gradient_accumulate_every: 1
  lr_scheduler: cosine
  lr_warmup_steps: 500
  max_train_steps: null
  max_val_steps: null
  num_epochs: 3050
  resume: true
  rollout_every: 50
  sample_every: 5
  seed: 42
  tqdm_interval_sec: 1.0
  use_ema: true
  val_every: 1

logging:
  project: diffusion_policy_debug
  resume: True
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  id: null
  group: null
  tags: ["${name}", "${task_name}", "${exp_name}"]

multi_run:
  run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${name}
  run:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
  sweep:
    dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
    subdir: ${hydra.job.num}
